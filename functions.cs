namespace PS4Saves
{
    internal static class functions
    {
        // @ChendoChap
        internal static byte[] GetSaveDirectories =
        {
            0x55, 0x48, 0x89, 0xE5, 0x48, 0x83, 0xEC, 0x50, 0x48, 0x89, 0x7D, 0xB8, 0x48, 0x89, 0x75, 0xB0, 0x48,
            0xB8, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x48, 0x89, 0x45, 0xE8, 0x48, 0xB8, 0xBB, 0xBB,
            0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0x48, 0x89, 0x45, 0xE0, 0x48, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
            0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x45, 0xD8, 0x48, 0xB8, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
            0x48, 0x89, 0x45, 0xD0, 0x48, 0x8B, 0x55, 0xB8, 0x48, 0x8B, 0x45, 0xE8, 0x48, 0x89, 0xD7, 0xFF, 0xD0,
            0x48, 0x89, 0x45, 0xC8, 0x48, 0x83, 0x7D, 0xC8, 0x00, 0x75, 0x0A, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0xE9,
            0x88, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x55, 0xC8, 0x48, 0x8B, 0x45, 0xE0, 0x48, 0x89, 0xD7, 0xFF, 0xD0,
            0x48, 0x89, 0x45, 0xF8, 0xC7, 0x45, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7D, 0xF8, 0x00, 0x74,
            0x59, 0x48, 0x8B, 0x45, 0xF8, 0x0F, 0xB6, 0x40, 0x06, 0x3C, 0x04, 0x75, 0x3A, 0x48, 0x8B, 0x45, 0xF8,
            0x0F, 0xB6, 0x40, 0x07, 0x3C, 0x09, 0x75, 0x2E, 0x48, 0x8B, 0x45, 0xF8, 0x48, 0x8D, 0x48, 0x08, 0x8B,
            0x55, 0xF4, 0x89, 0xD0, 0xC1, 0xE0, 0x02, 0x01, 0xD0, 0x01, 0xC0, 0x48, 0x63, 0xD0, 0x48, 0x8B, 0x45,
            0xB0, 0x48, 0x01, 0xC2, 0x48, 0x8B, 0x45, 0xD0, 0x48, 0x89, 0xCE, 0x48, 0x89, 0xD7, 0xFF, 0xD0, 0x83,
            0x45, 0xF4, 0x01, 0x48, 0x8B, 0x55, 0xC8, 0x48, 0x8B, 0x45, 0xE0, 0x48, 0x89, 0xD7, 0xFF, 0xD0, 0x48,
            0x89, 0x45, 0xF8, 0xEB, 0xA0, 0x48, 0x8B, 0x55, 0xC8, 0x48, 0x8B, 0x45, 0xD8, 0x48, 0x89, 0xD7, 0xFF,
            0xD0, 0x8B, 0x45, 0xF4, 0xC9, 0xC3
        };

        internal static byte[] GetGameImages =
            {
            0x55, 0x48, 0x89, 0xE5, 0x48, 0x83, 0xEC, 0x30, 0x48, 0x89, 0x7D, 0xD8, 0x48, 0x89, 0x75, 0xD0, 0x48,
            0x89, 0x55, 0xC8, 0x48, 0xB8, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x48, 0x8B, 0x7D, 0xD8,
            0x48, 0x8D, 0x35, 0x34, 0x00, 0x00, 0x00, 0xFF, 0xD0, 0x48, 0x89, 0x45, 0xE8, 0x48, 0x83, 0x7D, 0xE8,
            0x00, 0x74, 0x22, 0x48, 0xB8, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0x48, 0x8B, 0x7D, 0xD0,
            0xBE, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x55, 0xC8, 0x48, 0x8B, 0x4D, 0xE8, 0x48, 0x89, 0xCF, 0xFF,
            0xD0, 0x89, 0x45, 0xFC, 0x48, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x48, 0x8B, 0x7D,
            0xE8, 0xFF, 0xD0, 0x8B, 0x45, 0xFC, 0xC9, 0xC3, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0xC3, 0x72, 0x62,
            0x00, 0x00
        };
        //{
        //    // prologue
        //    0x55,                               // push rbp
        //    0x48, 0x89, 0xE5,                   // mov rbp, rsp
        //    0x48, 0x83, 0xEC, 0x30,             // sub rsp, 0x30

        //    // Save arguments: path, buffer, size
        //    0x48, 0x89, 0x7D, 0xD8,             // mov [rbp-0x28], rdi ; path
        //    0x48, 0x89, 0x75, 0xD0,             // mov [rbp-0x30], rsi ; buffer
        //    0x48, 0x89, 0x55, 0xC8,             // mov [rbp-0x38], rdx ; size

        //    // Load fopen address
        //    0x48, 0xB8,                         // movabs rax, fopen
        //    0xAA, 0xAA, 0xAA, 0xAA,
        //    0xAA, 0xAA, 0xAA, 0xAA,
        //    0x48, 0x8B, 0x7D, 0xD8,             // mov rdi, [rbp-0x28] ; path
        //    0x48, 0x8D, 0x35, 0x34, 0x00, 0x00, 0x00, // lea rsi, [rip+0x34] ; "rb"
        //    0xFF, 0xD0,                         // call rax
        //    0x48, 0x89, 0x45, 0xE8,             // mov [rbp-0x18], rax ; FILE*

        //    // if (fp == NULL) return -1;
        //    0x48, 0x83, 0x7D, 0xE8, 0x00,       // cmp QWORD PTR [rbp-0x18], 0
        //    0x74, 0x22,                         // je fail

        //    // fread(buffer, 1, size, fp)
        //    0x48, 0xB8,                         // movabs rax, fread
        //    0xBB, 0xBB, 0xBB, 0xBB,
        //    0xBB, 0xBB, 0xBB, 0xBB,
        //    0x48, 0x8B, 0x7D, 0xD0,             // mov rdi, [rbp-0x30] ; buffer
        //    0xBE, 0x01, 0x00, 0x00, 0x00,       // mov esi, 1
        //    0x48, 0x8B, 0x55, 0xC8,             // mov rdx, [rbp-0x38] ; size
        //    0x48, 0x8B, 0x4D, 0xE8,             // mov rcx, [rbp-0x18] ; FILE*
        //    0x48, 0x89, 0xCF,                   // mov rdi, rcx
        //    0xFF, 0xD0,                         // call rax
        //    0x89, 0x45, 0xFC,                   // mov [rbp-0x4], eax ; store bytes read

        //    // fclose(fp)
        //    0x48, 0xB8,                         // movabs rax, fclose
        //    0xCC, 0xCC, 0xCC, 0xCC,
        //    0xCC, 0xCC, 0xCC, 0xCC,
        //    0x48, 0x8B, 0x7D, 0xE8,             // mov rdi, [rbp-0x18]
        //    0xFF, 0xD0,                         // call rax

        //    // return bytes_read;
        //    0x8B, 0x45, 0xFC,                   // mov eax, [rbp-0x4]
        //    0xC9,                               // leave
        //    0xC3,                               // ret

        //    // fail:
        //    0xB8, 0xFF, 0xFF, 0xFF, 0xFF,       // mov eax, -1
        //    0xC9,                               // leave
        //    0xC3,                               // ret

        //    // "rb\0" string (must be 4 bytes aligned if executed)
        //    0x72, 0x62, 0x00, 0x00              // "rb",0
        //};
    }
}
